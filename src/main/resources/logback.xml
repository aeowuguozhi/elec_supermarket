<?xml version="1.0" encoding="UTF-8"?>
<configuration>
<!--    配置集中管理属性
        可以直接改属性的value值
        格式 ${name}
-->
    <property name="pattern" value="[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c %M %L [%thread] %m%n"></property>
    <!-- 日志输出格式：
            %-5level
            %d{yyyy-MM-dd HH:mm:ss.SSS} 日期
            %c 类的完整名称
            %M 为method
            %L为行号
            %thread 线程名称
            %n 换行
    -->

<!--    定义日志文件保存路径属性-->
    <property name="log_dir" value="./src/main/java/com/atguigu/boot/demo/logs"></property>

<!--    控制台日志输出的appender(用于指定日志输出的目的地)-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
<!--        控制输出流对象，默认System.out改为System.err-->
        <target>System.out</target>
<!--        日志消息格式配置 pattern-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

<!--    日志文件输出的appender-->
    <appender name="file" class="ch.qos.logback.core.FileAppender">
<!--        日志文件的保存路径-->
        <file>${log_dir}/logback.log</file>
        <!--日志消息格式配置 pattern-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

<!--    html格式日志文件输出-->
    <appender name="htmlFile" class="ch.qos.logback.core.FileAppender">
<!--        日志文件保存路径-->
        <file>${log_dir}/logback.html</file>
<!--        html消息配置格式-->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.html.HTMLLayout">
                <pattern>%-5level%d{yyyy-MM-dd HH:mm:ss.SSS}%c%M%L%thread%m</pattern>
            </layout>
        </encoder>
    </appender>

<!--    随着系统的运行，日志文件会越来越大，所以需要日志拆分和归档压缩   的Appender对象       压缩gzip gz-->
    <appender name="rollFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--        日志文件的保存路径,如果roll_logback.log文件太大了，就会以拆分规则进行拆分roll_logback.log文件.-->
        <file>${log_dir}/roll_logback.log</file>
        <!--日志消息格式配置 pattern-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
<!--        指定拆分规则-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
<!--            按照时间和压缩格式声明拆分的文件名    %i就是0，1，2，3  gz就是gzip压缩   %d{yyyy-MM-dd-HH-mm-ss}就是dateTime-->
            <fileNamePattern>${log_dir}/rolling.%d{yyyy-MM-dd}.log%i.gz</fileNamePattern>
<!--            按照文件大小拆分，拆分文件约为1MB-->
            <maxFileSize>1MB</maxFileSize>
        </rollingPolicy>
<!--        日志级别过滤器-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
<!--            日志过滤规则-->
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

<!--    异步日志，当系统运行时，不希望日志输出也占用主线程的资源，所以使用异步输出日志。-->
    <appender name="async" class="ch.qos.logback.classic.AsyncAppender">
<!--        指定某个具体的appender,为异步输出到日志文件。-->
        <appender-ref ref="rollFile"/>
    </appender>

<!--    root logger配置-->
    <root level="ALL">
        <appender-ref ref="console"/>
<!--        <appender-ref ref="file"/>-->
        <appender-ref ref="rollFile"/>
<!--        <appender-ref ref="htmlFile"/>-->
    </root>
</configuration>